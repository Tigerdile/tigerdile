<?php
/*
 * TiersTable.php
 *
 * Auto-generated by modelBuild.py Model script
 *
 * @author sconley
 */

namespace Swaggerdile\Model;

use Zend\Db\Sql\Sql;
use Zend\Db\Sql\Predicate\Literal;
use Zend\Db\Sql\Predicate\Expression;

class TiersTable extends ModelTable
{
    /*
     * Define our datastore table Kind
     *
     * @param string
     */
    protected $table = 'sd_tiers';

    /*
     * Override delete to handle all the unlinking that has
     * to go on.  Recommend this be done in a transaction.
     *
     * @param array
     */
    public function delete($query)
    {
        // Generate a list of tier ID's
        $res = $this->select(function($select) use ($query) {
            return $select->columns(array('id'))
                           ->where($query);
        });

        // Abort right here if we need to
        if(!count($res)) {
            return 0;
        }

        $idList = array();

        foreach($res as $row) {
            $idList[] = $row->id;
        }

        // Do all our deletes and unlinks
        Factory::getInstance()->get('OrderItems')->update(array(
                            'tier_id' => null
                        ),array(
                            'tier_id' => $idList
                        ));
        Factory::getInstance()->get('ContentTiersLink')->delete(array(
                            'tier_id' => $idList,
                        ));
        Factory::getInstance()->get('Subscriptions')->update(array(
                            'tier_id' => null
                        ),array(
                            'tier_id' => $idList
                        ));
        Factory::getInstance()->get('ProfilePatreonTiers')->update(array(
                            'tier_id' => null
                        ),array(
                            'tier_id' => $idList
                        ));

        $sql = new Sql($this->getAdapter(), 'sd_tier_reward_types');
        $obj = $sql->delete()->where(array('tier_id' => $idList));
        $sql->prepareStatementForSqlObject($obj)->execute();

        return parent::delete($query);
    }

    /*
     * Get users, broken down by tiers.
     *
     * @param integer profileId
     * @return array of tiers
     *         With user info to fetch array of member users.
     *
     * Ordered by tier price asc, tier title asc.
     */
    public function getUsersByTier($profileId)
    {
        $ret = $this->select(function($select) use ($profileId) {
            $select->join(  'sd_subscriptions',
                            'sd_subscriptions.tier_id = sd_tiers.id',
                            array('payment', 'is_patreon'))
                    ->join( 'tigerd_users',
                            'tigerd_users.ID = sd_subscriptions.user_id',
                            array(
                                'user_id' => 'ID',
                                'user_login' => 'user_login',
                                'display_name' => 'display_name',
                                'user_email' => 'user_email',
                            )
                        )
                    ->join( 'sd_balance_sheet',
                            'sd_balance_sheet.subscription_id = sd_subscriptions.id',
                            array('total_paid' => new Expression('sum(sd_balance_sheet.transaction)')),
                            'left'
                        )
                    ->where(array(
                            'sd_tiers.profile_id' => $profileId,
                            'sd_subscriptions.is_active' => 1,
                    ))
                    ->where(array(new Literal('(sd_balance_sheet.type_id=2 or sd_balance_sheet.type_id is null)')))
                    ->order(array('price' => 'asc',
                                  'title' => 'asc'))
                    ->group(array('sd_subscriptions.id'));
            return $select;
        });

        return $this->_returnArray($ret);
    }
}
