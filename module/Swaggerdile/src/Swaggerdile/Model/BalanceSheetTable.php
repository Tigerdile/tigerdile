<?php
/*
 * BalanceSheetTable.php
 *
 * Auto-generated by modelBuild.py Model script
 *
 * @author sconley
 */

namespace Swaggerdile\Model;

use Zend\Db\Sql\Sql;
use Zend\Db\Sql\Select;
use \Zend\Db\Sql\Predicate\Expression;

class BalanceSheetTable extends ModelTable
{
    /*
     * Define our datastore table Kind
     *
     * @param string
     */
    protected $table = 'sd_balance_sheet';

    /*
     * addTransaction
     *
     * Adds a transaction to the balance sheet.
     *
     * Updates the 'balance' column and provides a clean
     * interface for doing a credit to the table.
     *
     * THIS SHOULD BE DONE IN A TRANSACTION -- it is up to the
     * caller to start a transaction and then commit/rollback it.
     *
     * @param integer userId
     * @param integer typeId
     * @param float amount
     * @param integer payeeId (optiona)
     * @param integer orderId (optional)
     * @param integer subscriptionId (optional)
     * @param string notes (optional)
     *
     * @return $this
     */
    public function addTransaction($userId, $typeId, $amount, $payeeId = null,
                                $orderId = null, $subscriptionId = null, 
                                $notes = '')
    {
        // Get the latest balance
        $latest = $this->select(function($select) use ($userId) {
                    return $select->columns(array('balance'))
                                  ->where(array('user_id' => $userId))
                                  ->order('id desc')
                                  ->limit(1);
        });

        $balance = 0;

        if(count($latest)) {
            $balance = $latest->current()->balance;
        }

        $this->insert(array(
                        'user_id' => $userId,
                        'type_id' => $typeId,
                        'notes' => $notes,
                        'created' => date('Y-m-d H:i:s'),
                        'transaction' => $amount,
                        'balance' => $balance + $amount,
                        'order_id' => $orderId,
                        'subscription_id' => $subscriptionId,
                        'payee_id' => $payeeId,
        ));

        return $this;
    }

    /*
     * fetchOwedMoney
     *
     * This returns an array of balance sheet entries where Swaggerdile
     * owes someone money!  display_name and user_email are joined in
     * from the users table.
     *
     * This respects the order by / limit / offset stuff.
     *
     * @return array
     */
    public function fetchOwedMoney()
    {
        $sql = new Sql($this->getAdapter());

        $select = $sql->select()
                      ->from(array('bs1' => 'sd_balance_sheet'))
                      ->join(array('bs2' => 'sd_balance_sheet'),
                             'bs1.user_id = bs2.user_id and bs1.id < bs2.id',
                             array(), Select::JOIN_LEFT)
                      ->join('tigerd_users',
                             'tigerd_users.ID = bs1.user_id',
                             array('display_name', 'user_email'))
                      ->where(array(
                            new Expression('bs2.user_id is NULL and bs1.balance > 0')
                        ));
        $this->_addQueryFeatures($select);

//        print_r($select->getSqlString()); exit;

        $result = $sql->prepareStatementForSqlObject($select)->execute();

        $ret = array();
        
        foreach($result as $res) {
            $ret[] = new BalanceSheet($res);
        }

        return $ret;
    }
}
