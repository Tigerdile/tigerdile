<?php
/*
 * Profiles.php
 *
 * Auto-generated by modelBuild.py Model script
 *
 * @author sconley
 */

namespace Swaggerdile\Model;

use Zend\Db\Sql\Expression;
use Zend\Db\Sql\Sql;
use Zend\Db\Sql\Predicate\Literal;


class Profiles extends Model
{
    /*
     * If we have tiers loaded, let's cache them.
     *
     * @var array
     */
    protected $_tiers = array();

    /*
     * If we have milestones loaded, let's cache them.
     *
     * @var array
     */
    protected $_milestones = array();

    /*
     * getTiers
     *
     * Get our array of tiers.  This may be cached.
     *
     * @return array of Tiers
     */
    public function getTiers()
    {
        if(empty($this->_tiers)) {
            $this->_tiers = Factory::getInstance()->get('Tiers')
                                                  ->setOrderBy(array('price' => 'asc',
                                                                     'title' => 'asc'))
                                                  ->fetchByProfileId($this->getId());
        }

        return $this->_tiers;
    }

    /*
     * getMultiStreams
     *
     * Get an array of streams we're multi-streaming with.  This
     * will be empty if we're a single stream.
     *
     * @return array of Profiles, which may be empty.
     *
     * Query features are not supported.  They make no sense here.
     */
    public function getMultiStreams()
    {
        $rowset = Factory::getInstance()->get('Profiles')
                                        ->select(function($select) {
                $select->join('sd_multistream',
                              'sd_multistream.second_profile_id = sd_profiles.id',
                              array()
                        )
                       ->where(array(
                                'sd_multistream.first_profile_id' => $this->getId(),
                                'sd_multistream.is_approved' => 1,
                            )
                        );

                return $select;
            }
        );

        $ret = array();

        foreach($rowset as $row) {
            $ret[] = new Profiles($row->getArrayCopy());
        }

        return $ret;
    }

    /*
     * getMilestones
     *
     * Get our array of milestones.  This may be cached.
     *
     * @return array of Milestones
     */
    public function getMilestones()
    {
        if(empty($this->_milestones)) {
            $this->_milestones = Factory::getInstance()->get('Milestones')
                                                  ->setOrderBy(array('price' => 'asc',
                                                                     'title' => 'asc'))
                                                  ->fetchByProfileId($this->getId());
        }

        return $this->_milestones;
    }

    /*
     * getCurrentFunding
     *
     * Gets our current level of monthly funding.
     *
     * @return float
     */
    public function getCurrentFunding()
    {
        $rowset = Factory::getInstance()->get('Subscriptions')
                                        ->select(function($select) {
                                            return $select->columns(array(
                                                'funding' => new Expression('SUM(payment)')
                                            ))
                                            ->where(array(
                                                'profile_id' => $this->getId(),
                                                'is_active' => 1,
                                            ));
        });

        return $rowset->current()->funding;
    }

    /*
     * hasSamples
     *
     * Returns boolean if this profile has sample works available.
     *
     * @return boolean
     */
    public function hasSamples()
    {
        $rowset = Factory::getInstance()->get('Content')
                                        ->select(function($select) {
                                            return $select->columns(array('id'))
                                                          ->where(array(
                                                            'profile_id' => $this->getId(),
                                                            'is_sample' => 1))
                                                          ->limit(1);
                                        });

        return (count($rowset) > 0);
    }

    /*
     * Get the 'due' timestamp.  This will be when the payment is due,
     * and may be in the past.
     *
     * @return timestamp as an integer
     */
    public function getDueTimestamp()
    {
        // Thirty days from last paid if set, from create if not set
        if(!$this->getLastPaidOn()) {
            return strtotime($this->getCreated()) + 2592000;
        } else {
            return strtotime($this->getLastPaidOn()) + 2592000;
        }
    }

    /*
     * Is this stream expired?
     *
     * @return boolean
     */
    public function isStreamExpired()
    {
        return (!$this->getIsTigerdileFriend()) &&
               ($this->getDueTimestamp() < time());
    }

    /*
     * Get a subscriber count.
     *
     * @return integer
     */
    public function getSubscriberCount()
    {
        $sql = $this->_getSqlForTable('sd_profile_users');

        $ret = $this->_sqlExecute($sql,
                    $sql->select()
                        ->columns(array(new Literal('count(user_id) as total')))
                        ->where(array(
                            'profile_id' => $this->getId(),
                            'type_id' => 3,
                        ))
        );

        if(!count($ret)) {
            return 0;
        } else {
            $val = $ret->current();
            return (int)$val['total'];
        }
    }

    /*
     * Get the list of moderators
     *
     * @return array of User
     */
    public function getModerators()
    {
        $sql = $this->_getSqlForTable('tigerd_users');

        $rows = $this->_sqlExecute($sql,
            $sql->select()
                ->join('sd_profile_users',
                       'sd_profile_users.user_id = tigerd_users.ID',
                       array()
                )
                ->where(
                    array(
                        'sd_profile_users.profile_id' => $this->getId(),
                        'sd_profile_users.type_id' => 1,
                    )
                )
                ->order('tigerd_users.display_name asc')
        );

        $ret = array();

        foreach($rows as $row) {
            $ret[] = new User($row);
        }

        return $ret;
    }

    /*
     * Get the list of banned users
     *
     * @return array of User
     *
     * @TODO: Combine code so this isn't stupid and redundant?
     */
    public function getBannedUsers()
    {
        $sql = $this->_getSqlForTable('tigerd_users');

        $rows = $this->_sqlExecute($sql,
            $sql->select()
                ->join('sd_profile_users',
                       'sd_profile_users.user_id = tigerd_users.ID',
                       array()
                )
                ->where(
                    array(
                        'sd_profile_users.profile_id' => $this->getId(),
                        'sd_profile_users.type_id' => 2,
                    )
                )
                ->order('tigerd_users.display_name asc')
        );

        $ret = array();

        foreach($rows as $row) {
            $ret[] = new User($row);
        }

        return $ret;
    }

    /*
     * Get a list of folks you're multi-streaming with.
     *
     * @return array of Profile + user display name, user_id, and user_email
     */
    public function getMultistreamProfiles()
    {
        $sql = $this->_getSqlForTable('sd_profiles');

        $rows = $this->_sqlExecute($sql,
            $sql->select()
                ->join( 'sd_multistream',
                        'sd_multistream.second_profile_id = sd_profiles.id',
                        array()
                )
                ->join( 'tigerd_users',
                        'tigerd_users.ID = sd_profiles.owner_id',
                        array('display_name', 'user_id' => 'ID', 'user_email')
                )
                ->where(
                    array(
                        'sd_multistream.first_profile_id' => $this->getId(),
                    )
                )
                ->order('tigerd_users.display_name asc')
        );

        $ret = array();

        foreach($rows as $row) {
            $ret[] = new Profiles($row);
        }

        return $ret;
    }

    /*
     * Get a list of Rebroadcast objects associated with this profile.
     *
     * @return array of rebroadcast objects.
     */
    public function getRebroadcasts()
    {
        return Factory::getInstance()->get('Rebroadcasts')
                                     ->fetchByProfileId($this->getId());
    }
}
