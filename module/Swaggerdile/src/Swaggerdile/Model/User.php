<?php
/*
 * User.php
 *
 * Auto-generated by modelBuild.py Model script
 *
 * @author sconley
 */

namespace Swaggerdile\Model;

use \Zend\Db\Sql\Sql;

class User extends Model
{
    /*
     * @var array
     *
     * User meta from WordPress
     */
    protected $_userMeta = array();

    /*
     * @var boolean
     *
     * Have we loaded ALL user meta?  If this is false,
     * we will try to load again if  we don't have it
     * loaded already.
     */
    protected $_userMetaLoaded = false;

    /*
     * @var array
     *
     * Profiles, if we have 'em.
     */
    protected $_profiles = false;

    /*
     * @var boolean
     *
     * User is an admin?
     */
    protected $_isAdmin = null;

    /*
     * WordPress is retarded and needs special capitals.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->_values['ID'];
    }

    /*
     * WordPress needs a wrapper for ID.
     *
     * @param integer
     * @return $this
     */
    public function setId($id)
    {
        $this->_values['ID'] = $id;
        return $this;
    }

    /*
     * Get user meta from WordPress.
     *
     * If a parameter is provided, we'll JUST load that field.
     * Otherwise, we'll grab all user meta.
     *
     * Caches results.
     *
     * @param string Meta key (optional)
     * @param boolean refresh cache (optional)
     * @return array
     */
    public function getMeta($field = '', $refreshCache = false)
    {
        if($field == '') {
            if($refreshCache || (!$this->_userMetaLoaded)) {
                $this->_userMeta = array();

                $userTable = Factory::getInstance()->get('User');
                $select = (new Sql($userTable->getAdapter(), 'tigerd_usermeta'))->select();
                $select->where(array('user_id' => $this->getId()));

                foreach($userTable->selectWith($select) as $row) {
                    $this->_userMeta[$row->meta_key] = $row->meta_value;
                }

                $this->_userMetaLoaded = true;
            }

            return $this->_userMeta;
        }

        // Otherwise, just return one.
        if($refreshCache || (!array_key_exists($field, $this->_userMeta))) {
            $userTable = Factory::getInstance()->get('User');
            $select = (new Sql($userTable->getAdapter(), 'tigerd_usermeta'))->select();
            $select->where(array('user_id' => $this->getId(), 'meta_key' => $field));

            $row = $userTable->selectWith($select)->current();

            if($row) {
                $this->_userMeta[$row->meta_key] = $row->meta_value;
            } else {
                $this->_userMeta[$field] = '';
            }
        }

        return $this->_userMeta[$field];
    }

    /*
     * Set user meta from WordPress
     *
     * @param string Meta key 
     * @param string Meta value
     * @return array of all loaded meta
     *
     * This method will call 'getMeta' to fetch all user meta, and
     * will update the local cache with the new updated result.
     *
     * NOTE : WordPress does this thing where it allows you to
     * have multple meta fields with the same key.  This method
     * does NOT HANDLE THAT PROPERLY!!!  So be advised.  Tigerdile
     * doesn't use that kind of key often so hopefully it won't
     * come up.
     */
    public function setMeta($field, $value)
    {
        $meta = $this->getMeta();

        $userTable = Factory::getInstance()->get('User');
        $sql = new Sql($userTable->getAdapter(), 'tigerd_usermeta');
        $run = false;

        if(array_key_exists($field, $meta)) {
            $run = $sql->update()->set(array(
                                    'meta_value' => $value))
                                ->where(array(
                                    'user_id' => $this->getId(),
                                    'meta_key' => $field,
                                ));
        } else {
            $run = $sql->insert()->values(array(
                                    'user_id' => $this->getId(),
                                    'meta_key' => $field,
                                    'meta_value' => $value,));
        }

        $sql->prepareStatementForSqlObject($run)->execute();

        $meta[$field] = $value;

        return $meta;
    }

    /*
     * Get this user's profile(s).
     *
     * @return array
     */
    public function getProfiles()
    {
        if($this->_profiles === false) {
            $this->_profiles = Factory::getInstance()->get('Profiles')->fetchByOwnerId($this->getId());
        }

        return $this->_profiles;
    }

    /*
     * Is the user an admin?
     *
     * @return boolean
     */
    public function isAdmin()
    {
        if($this->_isAdmin !== null) {
            return $this->_isAdmin;
        }

        $adminMeta = $this->getMeta('tigerd_capabilities');

        if(strlen($adminMeta)) {
            $meta = unserialize($adminMeta);

            return ($this->_isAdmin = (is_array($meta) &&
                   array_key_exists('administrator', $meta) &&
                   $meta['administrator']));
        }

        return ($this->_isAdmin = false);
    }

    /*
     * Get our subscription and tier information for a given
     * profile ID.
     *
     * @param integer
     *
     * @return Subscriptions    (with tier_title and tier_id added)
     */
    public function getProfileSubscription($profileId)
    {
        return Factory::getInstance()->get('Subscriptions')
                                     ->fetchSubscriptionWithTier($this->_values['ID'], $profileId);
    }

    /*
     * Get our user's payment methods
     *
     * @return array of UserPaymentMethods
     */
    public function getPaymentMethods()
    {
        return Factory::getInstance()->get('UserPaymentMethods')
                                     ->fetchByUserId($this->getId());
    }

    /*
     * Get our list of subscribed stream channels.  I would like this to
     * not use WP metas at some point.  That point is not today, though,
     * so we'll fetch it the clunky way.
     *
     * This mimics how I implemented it on wordpress, which may not
     * be the best way to do it, but its what I've got right now.
     *
     * @returns an array mapping Post ID to Post Title
     */
    public function getSubscribedStreams()
    {
        $subscriptions = array();

        $subsTable = Factory::getInstance()->get('ProfileUsers');

        $rowset = $subsTable->select(function($select) {
            $select->where(
                array(
                    'user_id' => $this->getId(),
                    'type_id' => ProfileUsers::SUBSCRIBER,
                )
            )->join('sd_profiles',
                    'sd_profiles.id = sd_profile_users.profile_id');
        });

        foreach($rowset as $row) {
            $subscriptions[$row->id] = $row->title;
        }

        return $subscriptions;
    }

    /*
     * Are they subscribed to a given stream channel?
     *
     * @param integer channel ID
     * @return boolean, true if subscribed
     */
    public function isSubscribed($channelId)
    {
        $subsTable = Factory::getInstance()->get('ProfileUsers');

        $rowset = $subsTable->select(array(
                    'user_id' => $this->getId(),
                    'type_id' => ProfileUsers::SUBSCRIBER,
                    'profile_id' => (int)$channelId,
        ));

        return (count($rowset) > 0);
    }

    /*
     * Subscribe to a new stream channel.
     *
     * Another method that should someday not use WP.
     *
     * @param channelId    The channel to subscribe to.
     */
    public function addStreamSubscription($channelId)
    {
        // See if we're already subscribed.
        $subsTable = Factory::getInstance()->get('ProfileUsers');

        $rowset = $subsTable->select(array(
                            'user_id' => $this->getId(),
                            'type_id' => ProfileUsers::SUBSCRIBER,
                            'profile_id' => (int)$channelId,
        ));

        if(count($rowset)) {
            // We're already subscribed.
            return;
        }

        // See if this post even exists.
        $post = Factory::getInstance()->get('Profiles')->fetchById($channelId);

        if(!is_object($post)) {
            // This is an invalid channel ID
            return;
        }

        // insert
        $subsTable->insert(array(
                'profile_id' => (int)$channelId,
                'user_id' => $this->getId(),
                'type_id' => ProfileUsers::SUBSCRIBER,
        ));
    }

    /*
     * Unsubscribe to a new stream channel.
     *
     * Another method that should someday not use WP.
     *
     * @param channelId    The channel to subscribe to.
     */
    public function removeStreamSubscription($channelId)
    {
        $subsTable = Factory::getInstance()->get('ProfileUsers');

        $subsTable->delete(array(
                'profile_id' => (int)$channelId,
                'user_id' => $this->getId(),
                'type_id' => ProfileUsers::SUBSCRIBER,
        ));
    }
}
