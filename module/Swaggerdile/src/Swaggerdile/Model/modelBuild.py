#!/usr/local/bin/python3
#
# Because I'm super lazy -- this takes input from stdin and writes a PHP
# class for it.

import sys

modelName = ""

tableName = ""

#tableFields = [ ]


print ( "What is the name of the model class you want to create?" )
modelName = sys.stdin.readline().strip()
modelName = modelName[0].upper() + modelName[1:]

print ( "What is the name of the table / Kind underpinning?" )
tableName = sys.stdin.readline().strip()

#print ( "Enter your fields below, use CTRL-D when done.  Format is:" )
#print ( "field name,type   (or leave off type for default String)" )
#for line in sys.stdin :
#    pair = line.strip().split(',')

#    if len(pair) == 1 :
#        tableFields.append({"name" : pair[0], "type" : "String"})
#    else :
#        tableFields.append({"name" : pair[0], "type" : pair[1][0].upper() + pair[1][1:]})


# Write our model file
out = open("%sTable.php" % (modelName), 'w')

out.write("""<?php
/*
 * {0}.php
 *
 * Auto-generated by modelBuild.py Model script
 *
 * @author sconley
 */

namespace Swaggerdile\Model;

class {0} extends ModelTable
{{
    /*
     * Define our datastore table Kind
     *
     * @param string
     */
    protected $table = '{1}';
}}
""".format("{0}Table".format(modelName),tableName))

out.close()



# Write our model file
out = open("%s.php" % (modelName), 'w')

out.write("""<?php
/*
 * {0}.php
 *
 * Auto-generated by modelBuild.py Model script
 *
 * @author sconley
 */

namespace Swaggerdile\Model;

class {0} extends Model
{{

}}
""".format(modelName,tableName))

out.close()

