<?php
/*
 * UserTable.php
 *
 * Auto-generated by modelBuild.py Model script
 *
 * @author sconley
 */

namespace Swaggerdile\Model;

use Zend\Db\Sql\Select;

class UserTable extends ModelTable
{
    /*
     * Define our datastore table Kind
     *
     * @var string
     */
    protected $table = 'tigerd_users';

    /*
     * Fetch subscribed users
     *
     * This fetches users subscribed to a certain profile
     *
     * An optional query can provide additional filtering.
     *
     * @param integer or array of integers profile ID
     * @param array optional additional query params
     *
     * THIS OBEYS ORDER BY / LIMIT / OFFSET
     */
    public function fetchSubscribedUsers($profileId, $queryParam = array())
    {
        $queryParam['sd_subscriptions.profile_id'] = $profileId;

        $rowset = $this->select(function($select) use ($profileId, $queryParam) {
            $select->join(  'sd_subscriptions',
                            'sd_subscriptions.user_id = tigerd_users.ID',
                            array())
                   ->where($queryParam);
   
            return $this->_addQueryFeatures($select);
        });

        return $this->_returnArray($rowset);
    }

    /*
     * Overload fetchById to left join in our Patreon information.
     *
     * @param integer|array $id
     *
     * @return User|array of User
     */
    public function fetchById($id)
    {
        $order = $this->getOrderBy();

        $rowset = $this->select(function($select) use ($order, $id) {
            $select->where(array('tigerd_users.ID' => $id))
                   ->join(  'sd_patreon_users',
                            'sd_patreon_users.user_id = tigerd_users.ID',
                            array('patreon_id' => 'id'), Select::JOIN_LEFT);

            if(!empty($order)) {
                $select->order($order);
            }

            return $select;
        });

        if(is_array($id)) {
            if(count($id) != $rowset->count()) {
                // we didn't fetch all ID's.
                return null;
            }

            $ret = array();

            foreach($rowset as $row) {
                $ret[] = new User($row->getArrayCopy());
            }

            return $ret;
        }

        $row = $rowset->current();

        if(!$row) {
            return null;
        }

        return new User($row->getArrayCopy());
    }
}
